/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pl.clarin.chronocorpus.rest;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.Comment;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Drawing;
import org.apache.poi.ss.usermodel.RichTextString;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author twalkow
 */
public class JSON2XLSX {
    
    private void addCC(CreationHelper factory,XSSFSheet sheet)
    { 
        XSSFRow row = sheet.createRow(0);
        XSSFCell cell = row.createCell(0);
        cell.setCellValue("©");
        
        Drawing drawing = sheet.createDrawingPatriarch();
        
         // When the comment box is visible, have it show in a 1x3 space
        ClientAnchor anchor = factory.createClientAnchor();
        anchor.setCol1(cell.getColumnIndex());
        anchor.setCol2(cell.getColumnIndex()+20);
        anchor.setRow1(row.getRowNum());
        anchor.setRow2(row.getRowNum()+5);

        
        
        Comment comment = drawing.createCellComment(anchor);
        RichTextString str = factory.createRichTextString("The result was generated by Chronocorpus  http://chronocorpus.clarin-pl.eu ");
        comment.setString(str);
        comment.setAuthor("CLARIN-PL");
        cell.setCellComment(comment);
        
    }
    
    public byte[] process(JSONArray data) throws IOException
    {
        XSSFWorkbook workBook = new XSSFWorkbook();
        CreationHelper factory = workBook.getCreationHelper(); 
        XSSFSheet s = workBook.createSheet("stats");
        int j=0;
        
        //header
        if (data.length()>0)
        {   XSSFRow r = s.createRow(1);    
            for (String key:data.getJSONObject(0).keySet())
            {      XSSFCell c = r.createCell(j++);
                   c.setCellValue(key);
            }
        }    
        for (int i=1;i<=data.length();i++)
        {  XSSFRow r = s.createRow(i+1);
           JSONObject o=data.getJSONObject(i);
           
           for (String key:o.keySet())
           {  XSSFCell c = r.createCell(j++);
              setCell(c,key,o);  
              
           }
        }
        
        addCC(factory,s);
        //to array
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        workBook.write(buffer);
        return buffer.toByteArray();
    }

    private void setCell(XSSFCell c, String key, JSONObject json) {
       Object  o=json.get(key);
       if (o instanceof Integer) 
           c.setCellValue((Integer)o);
       if (o instanceof Double) 
           c.setCellValue((Double)o);    
       if (o instanceof String) 
           c.setCellValue((String)o);    
       if (o instanceof Boolean) 
           c.setCellValue((Boolean)o);    
     
    }
    
      public static void main(String[] args) throws Exception {
        //test();
       JSONObject a=new JSONObject();
       { a.put("liczba", 10);
         a.put("liczba2", 10.1);
         a.put("lancuch", "ASA");
        
       }
          for (String key:a.keySet())
          { Object o=a.get(key);
            System.out.println(o.getClass().getCanonicalName());
          }
    }
    
    
}
